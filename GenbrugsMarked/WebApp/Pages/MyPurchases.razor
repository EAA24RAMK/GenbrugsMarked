@page "/my-purchases"
@using Core.Models
@using WebApp.Services
@inject UserService UserService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<h3>Mine Indkøb</h3>

@if (requests == null)
{
    <p>Indlæser...</p>
}
else if (!requests.Any())
{
    <p>Du har ikke sendt nogen købsanmodninger endnu</p>
}
else
{
    <ul class="list-group">
        @if (requests.Any(r => r.Status == "Venter"))
        {
            <h4>Afventer svar</h4>
            <ul class="list-group">
                @foreach (var req in requests.Where(r => r.Status == "Venter").OrderByDescending(r => r.Date))
                {
                    var sale = allSales.FirstOrDefault(s => s.SalesId == req.SalesId);
                    var seller = allUsers.FirstOrDefault(u => u.Id == req.SellerUserId);

                    <li class="list-group-item">
                        <strong>Annonce:</strong> @(sale != null ? sale.Title : "Ukendt annonce") <br />
                        <strong>Sælger:</strong> @(seller != null ? seller.Name : "Ukendt sælger") <br />
                        <strong>Dato:</strong> @req.Date.ToShortDateString() <br />
                        <span class="badge bg-secondary">Afventer svar</span> <br />
                    </li>
                }
            </ul>
        }

        @if (requests.Any(r => r.Status == "Accepteret"))
        {
            <h4 class="mt-4">Accepterede køb</h4>
            <ul class="list-group">
                @foreach (var req in requests.Where(r => r.Status == "Accepteret").OrderByDescending(r => r.Date))
                {
                    var sale = allSales.FirstOrDefault(s => s.SalesId == req.SalesId);
                    var seller = allUsers.FirstOrDefault(u => u.Id == req.SellerUserId);

                    <li class="list-group-item">
                        <strong>Annonce:</strong> @(sale != null ? sale.Title : "Ukendt annonce") <br />
                        <strong>Sælger:</strong> @(seller != null ? seller.Name : "Ukendt sælger") <br />
                        <strong>Dato:</strong> @req.Date.ToShortDateString() <br />
                        <span class="badge bg-success">Accepteret</span>
                    </li>
                }
            </ul>
        }
        
        @if (requests.Any(r => r.Status == "Afvist"))
        {
            <h4 class="mt-4">Afviste anmodninger</h4>
            <ul class="list-group">
                @foreach (var req in requests.Where(r => r.Status == "Afvist").OrderByDescending(r => r.Date))
                {
                    var sale = allSales.FirstOrDefault(s => s.SalesId == req.SalesId);
                    var seller = allUsers.FirstOrDefault(u => u.Id == req.SellerUserId);
                    
                    <li class="list-group-item">
                        <strong>Annonce:</strong> @(sale != null ? sale.Title : "Ukendt annonce") <br />
                        <strong>Sælger:</strong> @(seller != null ? seller.Name : "Ukendt sælger") <br />
                        <strong>Dato:</strong> @req.Date.ToShortDateString()
                        <span class="badge bg-danger">Afvist</span> <br />
                    </li>
                }
            </ul>
        }
    </ul>
}

@code {
    private List<PurchaseRequest>? requests;
    private List<User> allUsers = new();
    private List<Sale> allSales = new();

    protected override async Task OnInitializedAsync()
    {
        var user = await LocalStorage.GetItemAsync<User>("loggedInUser");
        if (user != null)
        {
            requests = await UserService.GetRequestsForBuyerAsync(user.Id!);
            allUsers = await UserService.GetAllUsersAsync();
            allSales = await UserService.GetActiveSalesAsync();
        }
    }

}