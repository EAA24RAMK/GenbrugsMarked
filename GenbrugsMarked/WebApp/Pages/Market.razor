@page "/market"
@using Core.Models
@using WebApp.Services
@inject UserService UserService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<h3>Marked – Aktive Annoncer</h3>

<div class="d-flex align-items-center mb-3">
    <input @bind="SearchTerm" placeholder="Søg efter titel eller beskrivelse"
           class="form-control me-2" style="width: 25%;" />

    <select class="form-control" style="width: 180px;" @bind="SelectedSortOption">
        <option value="">Sortering</option>
        <option value="title">Titel A-Å</option>
        <option value="priceLowHigh">Pris Lav-Høj</option>
        <option value="priceHighLow">Pris Høj-Lav</option>
    </select>
</div>

@if (!string.IsNullOrWhiteSpace(searchTerm))
{
    <button class="btn btn-sm btn-secondary mb-3" @onclick="() => SearchTerm = string.Empty">Ryd søgning</button>
}

@if (filteredSales == null)
{
    <p>Indlæser annoncer...</p>
}
else if (filteredSales.Count == 0)
{
    <p>Ingen annoncer matcher din søgning.</p>
}
else
{
    <ul class="list-group">
        @foreach (var sale in filteredSales)
        {
            <li class="list-group-item">
                <strong>@sale.Title</strong> – @sale.Price kr.
                <p>@sale.Description</p>
                <p>Status: @sale.Status</p>
                <button class="btn btn-sm btn-primary" @onclick="() => RequestPurchase(sale)">Anmod om køb</button>
                @if (!string.IsNullOrEmpty(sale.ImageUrl))
                {
                    <img src="@sale.ImageUrl" alt="Billede" class="img-fluid rounded mb-2" style="max-height: 200px;" />
                }
            </li>
        }
    </ul>
}

@code {
    private List<Sale>? allSales;
    private List<Sale>? filteredSales;
    private string searchTerm = "";
    private string selectedSortOption = "";
    private List<int> acceptedSalesIds = new();

    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            searchTerm = value;
            FilterSales();
        }
    }

    private string _selectedSortOption = "";

    private string SelectedSortOption
    {
        get => _selectedSortOption;
        set
        {
            _selectedSortOption = value;
            FilterSales();
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        allSales = await UserService.GetActiveSalesAsync();
        acceptedSalesIds = await UserService.GetAcceptedSalesIdsAsync();
        FilterSales();
    }

    private void FilterSales()
    {
        IEnumerable<Sale> query = allSales?.Where(s => !acceptedSalesIds.Contains(s.SalesId)) ?? Enumerable.Empty<Sale>();

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var term = searchTerm.ToLower();
            query = query.Where(s =>
                (s.Title?.ToLower().Contains(term) ?? false) ||
                (s.Description?.ToLower().Contains(term) ?? false)
            );
        }

        // Sortering
        switch (_selectedSortOption)
        {
            case "title":
                query = query.OrderBy(s => s.Title);
                break;
            case "priceLowHigh":
                query = query.OrderBy(s => s.Price);
                break;
            case "priceHighLow":
                query = query.OrderByDescending(s => s.Price);
                break;
        }
        filteredSales = query.ToList();
    }

    private async Task RequestPurchase(Sale sale)
    {
        var buyer = await LocalStorage.GetItemAsync<User>("loggedInUser");
        if (buyer == null)
        {
            Console.WriteLine("Bruger ikke logget ind.");
            return;
        }

        var request = new PurchaseRequest
        {
            BuyerUserId = buyer.Id!,
            SellerUserId = sale.UserId,
            SalesId = sale.SalesId,
            Date = DateTime.Now,
            Status = "Venter"
        };
        
        var success = await UserService.SendPurchaseRequestAsync(request);
        if (success)
        {
            Console.WriteLine("Anmodning sendt!");
        }
        else
        {
            Console.WriteLine("Noget gik galt.");
        }
    }
}
