@page "/market"
@using Client.Services
@using Core.Models
@using WebApp.Services
@inject UserService UserService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject RoomService RoomService
@inject IJSRuntime JS

<div class="container mt-4">
    <h2 class="page-title">Marked</h2>

    <div class="d-flex flex-wrap align-items-center gap-3 mb-4">
        <input @bind="SearchTerm" placeholder="Søg efter varer..." class="form-control search-bar" />

        <select class="form-select filter-dropdown" @bind="SelectedSortOption">
            <option value="">Alle kategorier</option>
            <option value="title">Titel A-Å</option>
            <option value="priceLowHigh">Pris Lav-Høj</option>
            <option value="priceHighLow">Pris Høj-Lav</option>
        </select>
    </div>

    @if (!string.IsNullOrWhiteSpace(searchTerm))
    {
        <button class="btn btn-secondary mb-4" @onclick="() => SearchTerm = string.Empty">Ryd søgning</button>
    }

    @if (filteredSales == null)
    {
        <p>Indlæser annoncer...</p>
    }
    else if (filteredSales.Count == 0)
    {
        <p>Ingen annoncer matcher din søgning.</p>
    }
    else
    {
        <div class="row">
            @foreach (var sale in filteredSales)
            {
                var seller = allUsers.FirstOrDefault(u => u.Id == sale.UserId);
                <div class="col-md-3 mb-4">
                    <div class="card sale-card">
                        @if (!string.IsNullOrEmpty(sale.ImageUrl))
                        {
                            <img src="@sale.ImageUrl" class="card-img-top sale-image" alt="Billede af varen">
                        }
                        <div class="card-body">
                            <h5 class="card-title">@sale.Title</h5>
                            <p class="card-text">@sale.Price kr.</p>
                            <p class="card-text">@sale.Description</p>
                            <p class="card-text"><small class="text-muted">Sælger: @(seller != null ? seller.Name : "Ukendt")</small></p>
                            <button class="btn btn-success w-100" @onclick="() => RequestPurchase(sale)">Anmod om at købe</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<Sale>? allSales;
    private List<Sale>? filteredSales;
    private string searchTerm = "";
    private string selectedSortOption = "";
    private List<int> acceptedSalesIds = new();
    private List<User> allUsers = new();


    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            searchTerm = value;
            FilterSales();
        }
    }

    private string _selectedSortOption = "";
    
    private List<Room> rooms = new();
    
    private string SelectedSortOption
    {
        get => _selectedSortOption;
        set
        {
            _selectedSortOption = value;
            FilterSales();
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        allSales = await UserService.GetActiveSalesAsync();
        acceptedSalesIds = await UserService.GetAcceptedSalesIdsAsync();
        rooms = await RoomService.GetAllRoomsAsync();
        allUsers = await UserService.GetAllUsersAsync();
        FilterSales();
    }

    private void FilterSales()
    {
        IEnumerable<Sale> query = allSales?.Where(s => !acceptedSalesIds.Contains(s.SalesId)) ?? Enumerable.Empty<Sale>();

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var term = searchTerm.ToLower();
            query = query.Where(s =>
                (s.Title?.ToLower().Contains(term) ?? false) ||
                (s.Description?.ToLower().Contains(term) ?? false)
            );
        }

        // Sortering
        switch (_selectedSortOption)
        {
            case "title":
                query = query.OrderBy(s => s.Title);
                break;
            case "priceLowHigh":
                query = query.OrderBy(s => s.Price);
                break;
            case "priceHighLow":
                query = query.OrderByDescending(s => s.Price);
                break;
        }
        filteredSales = query.ToList();
    }

    private async Task RequestPurchase(Sale sale)
    {
        var buyer = await LocalStorage.GetItemAsync<User>("loggedInUser");
        if (buyer == null)
        {
            Console.WriteLine("Bruger ikke logget ind.");
            return;
        }

        var request = new PurchaseRequest
        {
            BuyerUserId = buyer.Id!,
            SellerUserId = sale.UserId,
            SalesId = sale.SalesId,
            Date = DateTime.Now,
            Status = "Venter"
        };
        
        var success = await UserService.SendPurchaseRequestAsync(request);
        if (success)
        {
            await JS.InvokeVoidAsync("alert", "Købsanmodning afsendt!");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Noget gik galt, prøv igen.");
        }
    }
    
    private string GetRoomName(int roomId)
    {
        var room = rooms.FirstOrDefault(r => r.RoomId == roomId);
        return room != null ? $"{room.Name} ({room.Floor})" : "Ukendt lokale";
    }

}
