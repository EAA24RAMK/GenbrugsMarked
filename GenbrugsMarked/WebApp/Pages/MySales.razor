@page "/my-sales"
@using Client.Services
@using Core.Models
@using WebApp.Services
@inject UserService UserService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IJSRuntime JS
@inject RoomService RoomService


<h3>Mine Annoncer</h3>

<h4>Opret ny annonce</h4>
<input @bind="newSale.Title" placeholder="Titel" />
<input @bind="newSale.Description" placeholder="Beskrivelse" />
<input @bind="newSale.Price" type="number" placeholder="Pris" />
<input @bind="newSale.ImageUrl" placeholder="Billed-URL" />
<select @bind="newSale.RoomId">
    <option value="">-- Vælg Lokale --</option>
    @foreach (var room in rooms)
    {
        <option value="@room.RoomId">@room.Name (@room.Floor)</option>
    }
</select>
<button @onclick="CreateSale">Opret annonce</button>

<p></p>

@if (user == null)
{
    <p>Login for at oprette og se dine annoncer</p>
}
else
{
    <div class="row">
    @foreach (var sale in user.Sales)
    {
        <div class="col-md-4 mb-4">
            <div class="card shadow-sm">
                @if (!string.IsNullOrEmpty(sale.ImageUrl))
                {
                    <img src="@sale.ImageUrl" class="card-img-top" style="height: 200px; object-fit: cover;">
                }
                <div class="card-body">
                    @if (isEditing && editingSale?.SalesId == sale.SalesId)
                    {
                        <input @bind="editingSale.Title" class="form-control mb-2" placeholder="Titel" />
                        <input @bind="editingSale.Price" type="number" class="form-control mb-2" placeholder="Pris" />
                        <input @bind="editingSale.Description" class="form-control mb-2" placeholder="Beskrivelse" />

                        <div class="d-flex gap-2 mt-2">
                            <button class="btn btn-success btn-sm" @onclick="SaveEditSale">Gem</button>
                            <button class="btn btn-secondary btn-sm" @onclick="CancelEdit">Annuller</button>
                        </div>
                    }
                    else
                    {
                        <h5 class="card-title">@sale.Title</h5>
                        <p class="card-text">@sale.Price kr.</p>
                        <p class="small text-muted">@sale.Description</p>
                    }


                    @if (myRequests.Any(r => r.SalesId == sale.SalesId && r.Status == "Accepteret"))
                    {
                        <span class="badge bg-success">Solgt</span>
                    }
                    else if (sale.Status == "Reserveret")
                    {
                        <span class="badge bg-warning text-dark">Reserveret</span>
                    }
                    else
                    {
                        <span class="badge bg-success">Aktiv</span>
                    }

                    <div class="mt-3">
                        @if (!myRequests.Any(r => r.SalesId == sale.SalesId && r.Status == "Accepteret"))
                        {
                            <button class="btn btn-outline-primary btn-sm me-2" @onclick="() => EditSale(sale)">Rediger</button>
                        }
                        <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteSale(sale.SalesId)">Slet</button>
                    </div>

                    @if (myRequests.Any(r => r.SalesId == sale.SalesId))
                    {
                        <div class="mt-3">
                            <p class="fw-bold">Købsanmodninger:</p>
                            <ul class="list-unstyled">
                                @foreach (var req in myRequests.Where(r => r.SalesId == sale.SalesId))
                                {
                                    var buyer = allUsers.FirstOrDefault(u => u.Id == req.BuyerUserId);
                                    <li>
                                        <strong>Køber:</strong> @(buyer != null ? buyer.Name : req.BuyerUserId) <br />
                                        <strong>Status:</strong> @req.Status <br />
                                        <strong>Dato:</strong> @req.Date.ToShortDateString() <br />
                                        
                                        @if (req.Status == "Venter")
                                        {
                                            <button class="btn btn-success btn-sm me-2 mt-1" @onclick='() => UpdateRequestStatus(req.Id!, "Accepteret")'>Accepter</button>
                                            <button class="btn btn-danger btn-sm mt-1" @onclick='() => UpdateRequestStatus(req.Id!, "Afvist")'>Afslå</button>
                                        }
                                    </li>
                                }
                            </ul>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>
}

@code {
    private User? user;
    private Sale newSale = new Sale();
    private List<PurchaseRequest> myRequests = new();
    private List<User> allUsers = new();
    private List<Room> rooms = new();
    private Sale? editingSale;
    private bool isEditing = false;

    protected override async Task OnInitializedAsync()
    {
        user = await LocalStorage.GetItemAsync<User>("loggedInUser");
        if (user != null)
        {
            user = await UserService.LoginAsync(user.Email, user.Password);
            myRequests = await UserService.GetRequestsForSellerAsync(user.Id!);
            allUsers = await UserService.GetAllUsersAsync();
            rooms = await RoomService.GetAllRoomsAsync();
        }
    }
    
    private string GetRoomName(int roomId)
    {
        var room = rooms.FirstOrDefault(r => r.RoomId == roomId);
        return room != null ? $"{room.Name} ({room.Floor})" : "Ukendt lokale";
    }


    private async Task CreateSale()
    {
        if (newSale.RoomId == 0)
        {
            await JS.InvokeVoidAsync("alert", "Du skal vælge et lokale, før du kan oprette annoncen.");
            return; // Stop, hvis der ikke er valgt lokale
        }
        
        newSale.CreatedDate = DateTime.Now;
        newSale.Status = "Aktiv";
        newSale.UserId = user.Id!;
        newSale.SalesId = new Random().Next(1000, 9999); // midlertidigt

        if (user != null)
        {
            var updatedUser = await UserService.AddSaleAsync(user.Id!, newSale);
            user = updatedUser;
            newSale = new Sale(); // ryd formular
        }
    }

    private async Task UpdateRequestStatus(string requestId, string newStatus)
    {
        var success = await UserService.UpdateRequestStatusAsync(requestId, newStatus);
        if (success)
        {
            var requestToUpdate = myRequests.FirstOrDefault(r => r.Id == requestId);
            if (requestToUpdate != null)
                requestToUpdate.Status = newStatus;
        }
    }
    
    // Metode til at slette en annonce
    private async Task DeleteSale(int salesId)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Er du sikker på, at du vil slette denne annonce?");
        
        if (user != null)
        {
            var updatedUser = await UserService.DeleteSaleAsync(user.Id!, salesId);
            if (updatedUser != null)
            {
                user = updatedUser;
            }
        }
    }
    
    private void EditSale(Sale sale)
    {
        editingSale = new Sale
        {
            SalesId = sale.SalesId,
            Title = sale.Title,
            Description = sale.Description,
            Price = sale.Price,
            UserId = sale.UserId,
            ImageUrl = sale.ImageUrl,
            Status = sale.Status,
            CreatedDate = sale.CreatedDate,
            RoomId = sale.RoomId
        };
        isEditing = true;
    }

    private void CancelEdit()
    {
        editingSale = null;
        isEditing = false;
    }

    private async Task SaveEditSale()
    {
        if (editingSale != null && user != null)
        {
            var updatedUser = await UserService.UpdateSaleAsync(user.Id!, editingSale);
            if (updatedUser != null)
            {
                user = updatedUser;
                editingSale = null;
                isEditing = false;
            }
        }
    }
}