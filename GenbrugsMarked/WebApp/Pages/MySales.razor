@page "/my-sales"
@using Client.Services
@using Core.Models
@using WebApp.Services
@inject UserService UserService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IJSRuntime JS
@inject RoomService RoomService


<h3>Mine Annoncer</h3>

<h4>Opret ny annonce</h4>
<input @bind="newSale.Title" placeholder="Titel" />
<input @bind="newSale.Description" placeholder="Beskrivelse" />
<input @bind="newSale.Price" type="number" placeholder="Pris" />
<select @bind="newSale.RoomId">
    <option value="">-- Vælg Lokale --</option>
    @foreach (var room in rooms)
    {
        <option value="@room.RoomId">@room.Name (@room.Floor)</option>
    }
</select>
<button @onclick="CreateSale">Opret annonce</button>

<p></p>

@if (user == null)
{
    <p>Indlæser bruger...</p>
}
else
{
    <ul class="list-group">
        @foreach (var sale in user.Sales)
        {
            <li class="list-group-item">
                <strong>
                    @sale.Title – @sale.Price kr.
                    @*
                    Tjekker om der findes en anmodning på annonce,
                    vis status = accepteret vis solgt badge
                    *@
                    @if (myRequests.Any(r => r.SalesId == sale.SalesId && r.Status == "Accepteret"))
                    {
                        <span class="badge bg-success ms-2">SOLGT</span>
                    }
                </strong>
                <p>@sale.Description</p>
                <p>Status: @sale.Status</p>
                <button class="btn btn-danger btn-sm mt-2" @onclick="() => DeleteSale(sale.SalesId)">Slet annonce</button>

                @if (myRequests.Any(r => r.SalesId == sale.SalesId))
                {
                    <p><em>Anmodninger:</em></p>
                    <ul>
                        @foreach (var req in myRequests.Where(r => r.SalesId == sale.SalesId))
                        {
                            var buyer = allUsers.FirstOrDefault(u => u.Id == req.BuyerUserId);
                            <li>
                                <strong>Køber:</strong> @(buyer != null ? buyer.Name : req.BuyerUserId) <br />
                                <strong>Status:</strong> @req.Status <br />
                                <strong>Dato:</strong> @req.Date.ToShortDateString() <br />
                                
                                @if (req.Status == "Venter")
                                {
                                    <button class="btn btn-success btn-sm me-2" @onclick='() => UpdateRequestStatus(req.Id!, "Accepteret")'>Accepter</button>
                                    <button class="btn btn-danger btn-sm" @onclick='() => UpdateRequestStatus(req.Id!, "Afvist")'>Afslå</button>
                                }
                                else
                                {
                                    <em>Handlet: @req.Status</em>
                                }
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p><em>Ingen anmodninger endnu.</em></p>
                }
            </li>
        }
    </ul>
}

@code {
    private User? user;
    private Sale newSale = new Sale();
    private List<PurchaseRequest> myRequests = new();
    private List<User> allUsers = new();
    private List<Room> rooms = new();


    protected override async Task OnInitializedAsync()
    {
        user = await LocalStorage.GetItemAsync<User>("loggedInUser");
        if (user != null)
        {
            user = await UserService.LoginAsync(user.Email, user.Password);
            myRequests = await UserService.GetRequestsForSellerAsync(user.Id!);
            allUsers = await UserService.GetAllUsersAsync();
            rooms = await RoomService.GetAllRoomsAsync();
        }
    }

    private async Task CreateSale()
    {
        newSale.CreatedDate = DateTime.Now;
        newSale.Status = "Aktiv";
        newSale.UserId = user.Id!;
        newSale.ImageUrl = ""; // Tilføj senere
        newSale.SalesId = new Random().Next(1000, 9999); // midlertidigt

        if (user != null)
        {
            var updatedUser = await UserService.AddSaleAsync(user.Id!, newSale);
            user = updatedUser;
            newSale = new Sale(); // ryd formular
        }
    }

    private async Task UpdateRequestStatus(string requestId, string newStatus)
    {
        var success = await UserService.UpdateRequestStatusAsync(requestId, newStatus);
        if (success)
        {
            var requestToUpdate = myRequests.FirstOrDefault(r => r.Id == requestId);
            if (requestToUpdate != null)
                requestToUpdate.Status = newStatus;
        }
    }
    
    // Metode til at slette en annonce
    private async Task DeleteSale(int salesId)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Er du sikker på, at du vil slette denne annonce?");
        
        if (user != null)
        {
            var updatedUser = await UserService.DeleteSaleAsync(user.Id!, salesId);
            if (updatedUser != null)
            {
                user = updatedUser;
            }
        }
    }
}